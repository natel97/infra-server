// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=api_mock.go -package=cloudflare
//
// Package cloudflare is a generated GoMock package.
package cloudflare

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockAPI) CreateRecord(zone string, record dnsRecordAPI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", zone, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockAPIMockRecorder) CreateRecord(zone, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockAPI)(nil).CreateRecord), zone, record)
}

// DeleteRecord mocks base method.
func (m *MockAPI) DeleteRecord(zone, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", zone, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockAPIMockRecorder) DeleteRecord(zone, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockAPI)(nil).DeleteRecord), zone, id)
}

// GetRecord mocks base method.
func (m *MockAPI) GetRecord(zone, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", zone, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockAPIMockRecorder) GetRecord(zone, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockAPI)(nil).GetRecord), zone, id)
}

// GetRecords mocks base method.
func (m *MockAPI) GetRecords(zone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", zone)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetRecords indicates an expected call of GetRecords.
func (mr *MockAPIMockRecorder) GetRecords(zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockAPI)(nil).GetRecords), zone)
}

// GetZones mocks base method.
func (m *MockAPI) GetZones() ([]zone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZones")
	ret0, _ := ret[0].([]zone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZones indicates an expected call of GetZones.
func (mr *MockAPIMockRecorder) GetZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZones", reflect.TypeOf((*MockAPI)(nil).GetZones))
}

// UpdateRecord mocks base method.
func (m *MockAPI) UpdateRecord(zone, id string, record dnsRecordAPI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", zone, id, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockAPIMockRecorder) UpdateRecord(zone, id, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockAPI)(nil).UpdateRecord), zone, id, record)
}
